<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/10/22/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%AE%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/10/22/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%AE%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>图片懒加载的定义以及实现它的几种方式</h1><h2 id="图片懒加载是什么">图片懒加载是什么</h2><p>类似于大型的淘宝商城、京东等网页，设计大量的商品图片信息，如果我们使页面包含的所有图片一次性加载完成，那用户体验很差。目前流行的做法是滚动动态加载，也就是懒加载，显示在屏幕之外的图片默认不加载，随着页面的滚动，图片进入了显示的范围，则触发图片的加载显示这样做的好处，一是页面加载速度快(浏览器进度条和加载转圈很快就结束了，这样用户的体验也比较好)，二是节省流量，因为不可能每一个用户会把页面从上到下滚动完</p><h2 id="如何实现">如何实现</h2><h4 id="1-js方法">1. js方法</h4><p>js方法，利用滚动事件，判断当时的图片位置是否在可视框内，然后进行渲染。</p><p>1.存储图片的真实路径，把图片的真实路径绑定给一个以data开头的自定义属性data-url即可，页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片（没有请求就提高了性能）</p><pre><code class="language-html">&lt;div class=&quot;scrollLoading&quot; data-url=&quot;loaded.html&quot;&gt;加载中...&lt;/div&gt;</code></pre><p>2.初始化img的时候，src不能是真实的图片地址(会一次性发送请求)，也不可以是空地址或者坏地址(会出现出错图标，如下所示：）</p><p><img src="https://img-blog.csdnimg.cn/cc9751857bf646388d204cf38a5dd3c4.png" alt="在这里插入图片描述"></p><p>3.设置img的默认src为一张1px*1px，很小很小的gif透明图片（所有的img都用这一张，只会发送一次请求），之所以需要是透明的，是需要透出通过background设置的背景图(一张loading.png，就是一个转圈圈的背景效果图)</p><p>4.需要一个滚动事件，判断元素是否在浏览器窗口，一旦进入视口才进行加载，当滚动加载的时候，就把这张透明的1px.gif图片替换为真正的url地址（也就是data-url里保存的值）</p><pre><code class="language-html">&lt;img  data-url=&quot;xxx&quot; src=&quot;1px.gif&quot; width=&quot;180&quot; height=&quot;180&quot; style=&quot;background:url(loading.gif) no-repeat center;&quot; /&gt;</code></pre><p>5.等到图片进入视口后，利用js提取data-url的真实图片地址赋值给src属性，就会去发送请求加载图片，真正实现了按需加载</p><p><strong>弊端：代码冗杂，你还要去监听页面的滚动事件，这本身就是一个不建议监听的事件，即便是我们做了节流或防抖</strong></p><p><strong>具体操作</strong></p><h4 id="1-获取可视窗口的大小">1.获取可视窗口的大小</h4><p>IE9和其他浏览器提供了innerWidth 和 innerHeight属性获取当前浏览器窗口的大小</p><p>IE8及更早版本以前没有提供取得浏览器窗口大小的属性，不过提供了dom页面可见区域的属性，即<br>document.documentElement.clientHeight<br>document.documentElement.clientWidth<br>元素的客户区大小（client dimension），指的是元素内容及其内边距所占据的空间大小。有关客户区 大小的属性有两个：clientWidth 和 clientHeight。其中，clientWidth 属性是元素内容区宽度加 上左右内边距宽度；clientHeight 属性是元素内容区高度加上上下内边距高度</p><p>IE6中，上述属性必须在标准模式才有效，如果是混杂模式，需要通过document.body.clientWidth 和 document.body. clientHeight 取得相同信息。</p><p>代码实现：</p><pre><code>var pageWidth = window.innerWidth,  pageHeight = window.innerHeight;  if (typeof pageWidth != &quot;number&quot;)&#123;  //pageWidth的值不是数值，说明没有innerwidth属性 if (document.compatMode == &quot;CSS1Compat&quot;)&#123; //标准模式 pageWidth = document.documentElement.clientWidth;  pageHeight = document.documentElement.clientHeight;  &#125; else &#123; //混在模式 pageWidth = document.body.clientWidth;  pageHeight = document.body.clientHeight;  &#125; &#125;</code></pre><h4 id="2-获取内容滚动的距离">2. 获取内容滚动的距离</h4><p><img src="https://img-blog.csdnimg.cn/a877e1cd71804b65a3e90d45df2ad56a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZGFyYWJpdXo=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="3-如何判断图片进入了可视区域">3. 如何判断图片进入了可视区域</h4><p><img src="https://img-blog.csdnimg.cn/b2af1c682cbe4b58a83236ef899c459e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZGFyYWJpdXo=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>上图蓝色部分表示视口大小，可以想象成手机屏幕，蓝色区域的高度和宽度也就是视口的高度和宽度，用innerHeight和innerWidth来表示外面的大黑色框框表示内容的大小(手机屏幕那么小宽度不可能装下所有的网页内容，所以会有“溢出”，可以用scrollTop和scrollLeft表示上面和左边溢出的部分)<br>绿色的小方框表示图片，图片的顶部到内容的顶部称为图片的offsetTop<br>那么很明显，若内容上方偏移量(scrollTop)+视口高度(innerHeight)&gt;图片距离内容顶部的偏移量(offsetTop)，则说明图片在视口内，否则说明图片在视口外。</p><h3 id="二、使用-content-visibility-auto-实现图片内容的延迟渲染">二、使用 <code>content-visibility: auto</code> 实现图片内容的延迟渲染</h3><p>首先，介绍一个非常有用，但是相对较为冷门的属性 – <code>content-visibility</code>。</p><p><code>content-visibility</code>：属性控制一个元素是否渲染其内容，它允许用户代理（浏览器）潜在地省略大量布局和渲染工作，直到需要它为止。</p><p>利用 <code>content-visibility</code> 的特性，我们可以实现<strong>如果该元素当前不在屏幕上，则不会渲染其后代元素</strong>。</p><p>假设我们有这样一个 DEMO：</p><pre><code class="language-html">&lt;div class=&quot;g-wrap&quot;&gt;    // 模块 1       &lt;div class=&quot;paragraph&quot;&gt;             &lt;p&gt;Lorem Start!&lt;/p&gt;              &lt;img src=&quot;https://s1.ax1x.com/2023/02/20/pSX1xMV.png&quot; alt=&quot;&quot; /&gt;            &lt;p&gt;Lorem End!&lt;/p&gt;         &lt;/div&gt;    // 模块 2      &lt;div class=&quot;paragraph&quot;&gt;          &lt;p&gt;Lorem Start!&lt;/p&gt;                &lt;img src=&quot;https://s1.ax1x.com/2023/02/20/pSX1xMV.png&quot; alt=&quot;&quot; /&gt;           &lt;p&gt;Lorem End!&lt;/p&gt;       &lt;/div&gt;    // ... 连续几十个上述类似的结构&lt;/div&gt;</code></pre><p>只需要给需要延迟（实时）渲染的元素，设置简单的 CSS 样式：</p><pre><code>.paragraph &#123;    content-visibility: auto;&#125;</code></pre><h3 id="content-visibility-auto-VS-图片懒加载"><code>content-visibility: auto</code> VS 图片懒加载</h3><p>当然，其实使用 <code>content-visibility: auto</code> 并不能真正意义上实现图片的懒加载。</p><p>这是因为，即便当前页面可视区域外的内容未被渲染，但是图片资源的 HTTP/HTTPS 请求，依然会在页面一开始被触发！</p><p>因此，这也得到了一个非常重要的结论：</p><p><code>content-visibility: auto</code> <strong>无法直接替代图片懒加载，设置了 <code>content-visibility: auto</code> 的元素在可视区外只是未被渲染，但是其中的静态资源仍旧会在页面初始化的时候被全部加载</strong>。因此，它更像是一个虚拟列表的替代方案。</p><h3 id="三、使用-loading-lazy-HTML-属性实现图片懒加载">三、使用 <code>loading=lazy</code> HTML 属性实现图片懒加载</h3><p>OK，<code>content-visibility</code> 很不错，但是略有瑕疵。但是，我们还有其他方式。</p><p>HTML5 新增了一个 <code>loading</code> 属性。</p><p>到今天，除了 IE 系列浏览器，目前都支持通过 <code>loading</code> 属性实现延迟加载。此属性可以添加到 <code>&lt;img&gt;</code> 元素中，也可以添加到 <code>&lt;iframe&gt;</code> 元素中。</p><p>属性的值为 <code>loading=lazy</code> 会告诉浏览器，如果图像位于可视区时，则立即加载图像，并在用户滚动到它们附近时获取其他图像。</p><p>我们可以像是这样使用它：</p><pre><code>&lt;img src=&quot;xxx.png&quot; loading=&quot;lazy&quot;&gt;</code></pre><p><strong>这样，便可以非常便捷的实现图片的懒加载，省去了添加繁琐的 JavaScript 代码的过程</strong>。</p><h3 id="四、使用-decoding-async-实现图片的异步解码">四、使用 <code>decoding=async</code> 实现图片的异步解码</h3><p>除了 <code>loading=lazy</code>，HTML5 还新增了一个非常有意思的属性增强图片的用户体验。那就是 <code>decoding</code> 属性。</p><p>HTMLImageElement 接口的 <code>decoding</code> 属性用于告诉浏览器使用何种方式解析图像数据。</p><p>它的可选取值如下：</p><ul class="lvl-0"><li class="lvl-2"><p><code>sync</code>: 同步解码图像，保证与其他内容一起显示。</p></li><li class="lvl-2"><p><code>async</code>: 异步解码图像，加快显示其他内容。</p></li><li class="lvl-2"><p><code>auto</code>: 默认模式，表示不偏好解码模式。由浏览器决定哪种方式更适合用户。</p></li></ul><p>上文其实也提及了，浏览器在进行图片渲染展示的过程中，是需要对图片文件进行解码的，这一个过程快慢与图片格式有关。</p><p>而如果我们不希望图片的渲染解码影响页面的其他内容的展示，可以使用 <code>decoding=async</code> 选项，像是这样：</p><pre><code>&lt;img src=&quot;xxx.png&quot; decoding=&quot;async&quot;&gt;</code></pre><p>这样，浏览器便会异步解码图像，加快显示其他内容。这是图片优化方案中可选的一环。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/22/%E4%BB%80%E4%B9%88%E6%98%AFBFC%E4%BB%A5%E5%8F%8ABFC%E7%9A%84%E7%94%A8%E9%80%94/"/>
      <url>/2023/10/22/%E4%BB%80%E4%B9%88%E6%98%AFBFC%E4%BB%A5%E5%8F%8ABFC%E7%9A%84%E7%94%A8%E9%80%94/</url>
      
        <content type="html"><![CDATA[<h1>什么是BFC以及BFC的用途</h1><h2 id="什么是BFC">什么是BFC</h2><h3 id="定义">定义</h3><p><strong>BFC - Block Formatting Context 块级格式化上下文</strong></p><p>BFC的定义，在官方文档到中是这么介绍的：一个BFC区域包含创建该上下文元素的所有子元素，但是不包括创建了新的BFC的子元素的内部元素，BFC是一块块独立的渲染区域，可以将BFC看成是元素的一种属性，拥有了这种属性的元素就会使他的子元素与世隔绝，不会影响到外部其他元素</p><pre><code class="language-html">&lt;div class=&quot;box1&quot; id=&quot;HM_bfc1&quot;&gt;     &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;box5&quot; id=&quot;HM_bfc2&quot;&gt;         &lt;div class=&quot;box6&quot;&gt;&lt;/div&gt;         &lt;div class=&quot;box7&quot;&gt;&lt;/div&gt;         &lt;div class=&quot;box8&quot;&gt;&lt;/div&gt;     &lt;/div&gt;&lt;/div&gt;</code></pre><p>用这段代码来解释上面那段BFC定义的话，就应该是这个意思：#HM_bfc1是一块BFC区域，这块区域包含了box2、box3、box4、box5，也就是所有#HM_bfc1的子元素。同时#HM_bfc2也创造了一块BFC区域，包含了box6，box7，box8。注意，第一个box1的BFC，只包括box1的子元素box2345，不包括box678。#HM_bfc2这个BFC同样也仅仅是包括自己的子元素box678。</p><p>划重点</p><ol><li class="lvl-3"><p><strong>每一个BFC区域只包括其子元素，不包括其子元素的子元素</strong>。(这1点比较容易理解)</p></li><li class="lvl-3"><p><strong>每一个BFC区域都是独立隔绝的,互不影响！</strong>(这点不太好理解，但是后续会使用代码验证)</p></li></ol><h3 id="触发BFC">触发BFC</h3><p>并不是任意一个元素都可以被当做BFC，只有当这个元素满足以下任意一个条件的时候，这个元素才会被当做一个BFC。</p><p><strong>触发BFC的条件</strong></p><ul class="lvl-0"><li class="lvl-2"><p>body根元素</p></li><li class="lvl-2"><p>设置浮动，不包括none</p></li><li class="lvl-2"><p>设置定位，absoulte或者fixed</p></li><li class="lvl-2"><p>行内块显示模式，inline-block</p></li><li class="lvl-2"><p>设置overflow，即hidden，auto，scroll</p></li><li class="lvl-2"><p>表格单元格，table-cell</p></li><li class="lvl-2"><p>弹性布局，flex</p></li></ul><h2 id="利用BFC解决问题">利用BFC解决问题</h2><p>在你明白了解BFC的触发规则之后，那么就需要利用BFC的特点来解决我们在布局中遇到的一些问题了，还记得我们之前说过，BFC有一个特点是：<strong>每一个BFC区域都是相互独立，互不影响的。</strong></p><h4 id="1-解决外边距的塌陷问题（垂直塌陷）">1 解决外边距的塌陷问题（垂直塌陷）</h4><p>开发中，前端的布局手段，离不开外边距margin，那么，也会遇到一些问题，例如外边距的垂直塌陷问题。</p><p><img src="https://img-service.csdnimg.cn/img_convert/2ad70ebd41da218012adfca472838b0b.png" alt="img"></p><p>通过以上的实例，我们会发现，代码给两个div盒子，都添加了四个方向的margin，讲道理，学过数学的都知道，100+100=200.可是，盒子之间的距离，现在却之后100px。这就是很典型的margin的塌陷，两段margin重叠到了一块，互相影响。那么，如何利用BFC，让这个问题得到解决呢。回忆下，上文说过，BFC，就是一个与世隔绝的独立区域，不会互相影响，那么，我们可以将这两个盒子，放到两个BFC区域中，即可解决这个问题。</p><p><img src="https://img-service.csdnimg.cn/img_convert/7624be2cd5cbe19138b8ed201dabdfe3.png" alt="img"></p><h4 id="2-利用BFC解决包含塌陷">2 利用BFC解决包含塌陷</h4><p>当父子关系的盒子，给子元素添加margin-top，有可能会把父元素一起带跑</p><p><img src="https://img-service.csdnimg.cn/img_convert/f4ab05b30df912f1a7cc9dcf5e1f930e.png" alt="img"></p><p>原本，正确的显示方式，应该是粉色盒子与红色盒子的顶部距离为50px，但是由于margin的塌陷问题，导致盒子内部的布局影响到了外部。这个时候，就可以触发BFC，将父盒子变成一个独立的区域，这样在BFC区域内部的任何操作，都不会影响到外部。</p><p><img src="https://img-service.csdnimg.cn/img_convert/dae850fd2ef84d2d346dfa13aa3f02d4.png" alt="img"></p><h4 id="3-当浮动产生影响的时候，可以利用BFC来清除浮动的影响">3 当浮动产生影响的时候，可以利用BFC来清除浮动的影响</h4><p><img src="https://img-service.csdnimg.cn/img_convert/7a193a37b6257a33621a2f9fa8d96436.png" alt="img"></p><p>以上代码表示，一个没有设置高度的父盒子，包含着七个子元素。如果此时，所有的子元素都浮动的话。</p><p><img src="https://img-service.csdnimg.cn/img_convert/de849a7c6dd4752b6d0cdff45ede40e7.png" alt="img"></p><p>当所有的子元素都浮动了，这个时候，父盒子失去了原有的高度，这就是浮动的影响。这个时候，同样也可用BFC的机制，来清除浮动带来的影响。使用BFC，将所有的浮动元素包裹起来。</p><h4 id="4-BFC可以阻止标准流元素被浮动元素覆盖">4 BFC可以阻止标准流元素被浮动元素覆盖</h4><p><img src="https://img-service.csdnimg.cn/img_convert/bc71c7ec9908e03c98e2e2cbc2443113.png" alt="img"></p><p><strong>大家都知道，浮动的元素会脱离文档流，跑到上一个层面，也就是和原本的元素们不在一个层面了。所以可能会导致浮动元素覆盖基本元素的问题。</strong></p><p><strong>那么这个时候我们只需要让蓝色区域触发BFC，就可以做到不受浮动元素影响</strong></p><p><img src="https://img-blog.csdnimg.cn/0f588409de024b86a030e129e714838e.png" alt="在这里插入图片描述"></p><p>当蓝色盒子触发了BFC之后，浮动元素再也不能覆盖它了，而且还能利用这个特性，来实现蓝色盒子宽度根据红色盒子的宽度来做自动适应</p><h3 id="总结">总结</h3><ul class="lvl-0"><li class="lvl-2"><p>一个BFC区域只包含其子元素，不包括其子元素的子元素.</p></li><li class="lvl-2"><p>并不是所有的元素都能成为一块BFC区域，只有当这个元素满足条件的时候才会成为一块BFC区域</p></li><li class="lvl-2"><p>不同的BFC区域之间是相互独立的，互不影响的。利用这个特性我们可以让不同BFC区域之间的布局不产生影响.</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js实现继承的6种方式</title>
      <link href="/2023/09/23/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/09/23/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="目录">目录</h2><p>-<a href="#1.%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF">原型链继承</a><br>-<a href="#2.%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF">借用构造函数继承</a><br>-<a href="#3.%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%EF%BC%88%E7%BB%8F%E5%85%B8%E7%BB%A7%E6%89%BF%EF%BC%89">组合继承（经典继承）</a><br>-<a href="#4.%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF">原型式继承</a><br>-<a href="#5.%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF">寄生式继承</a><br>-<a href="#6.%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF">寄生组合式继承寄生式继承</a></p><blockquote><p>JavaScript想实现继承的目的：重复利用另外一个对象的属性和方法。</p></blockquote><h2 id="1-原型链继承">1.原型链继承</h2><blockquote><p>让一个构造函数的原型是另一个类型的实例，那么这个构造函数new出来的实例就具有该实例的属性。<br>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p></blockquote><pre><code class="language-js">function Parent() &#123;   this.isShow = true   this.info = &#123;       name: &quot;xyy&quot;,       age: 18,   &#125;;&#125; Parent.prototype.getInfo = function() &#123;   console.log(this.info);   console.log(this.isShow);&#125; function Child() &#123;&#125;;Child.prototype = new Parent();//prototype属性是这个函数所创建的实例的原型对象  let Child1 = new Child();//new关键词实例化该构造函数Child1.info.gender = &quot;男&quot;;//在Child1的原型（一个Parent实例）上增加了一个gender属性Child1.getInfo(); // &#123;name: 'xyy', age: 18, gender: '男'&#125; ture let child2 = new Child();child2.isShow = false//直接在child2上添加了一个属性isShowconsole.log(child2.info.gender) // 男child2.getInfo(); // &#123;name: 'xyy', age: 18, gender: '男'&#125; false</code></pre><p>优点：写法方便简洁，容易理解。</p><p>缺点：对象实例共享所有继承的属性和方法。传教子类型实例的时候，不能传递参数，因为这个对象是一次性创建的（没办法定制化）。</p><h2 id="2-借用构造函数继承">2.借用构造函数继承</h2><p>核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p><pre><code class="language-javascript">function Parent1()&#123;    this.name = 'parent1';  &#125;   Parent1.prototype.getName = function () &#123;    return this.name;  &#125;   function Child1()&#123;    Parent1.call(this);    this.type = 'child1'  &#125;   let child = new Child1();  console.log(child);  // 没问题  console.log(child.getName());  // 会报错</code></pre><p>特点：<br>1.解决了1中，子类实例共享父类引用属性的问题<br>2.创建子类实例时，可以向父类传递参数<br>3.可以实现多继承（call多个父类对象）</p><p>缺点：<br>1.实例并不是父类的实例，只是子类的实例<br>2.只能继承父类的实例属性和方法，不能继承原型属性/方法<br>3.无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</p><h2 id="3-组合继承（经典继承）">3.组合继承（经典继承）</h2><blockquote><p>将 原型链 和 借用构造函数 的组合到一块。使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有自己的属性</p></blockquote><pre><code class="language-javascript">function Person(gender) &#123;  console.log('执行次数');  this.info = &#123;    name: &quot;喜羊羊&quot;,    age: 19,    gender: gender  &#125;&#125; Person.prototype.getInfo = function () &#123;   // 使用原型链继承原型上的属性和方法  console.log(this.info.name, this.info.age)&#125; function Child(gender) &#123;  Person.call(this, gender) // 使用构造函数法传递参数&#125; Child.prototype = new Person()//重点是这一步 让Child的原型是一个Person实例 let child1 = new Child('男');child1.info.nickname = '小喜'child1.getInfo()console.log(child1.info); let child2 = new Child('女');console.log(child2.info);</code></pre><blockquote><p>执行次数输出几次？</p></blockquote><p>优点: 解决了原型链继承和借用构造函数继承造成的影响。</p><p>缺点: 无论在什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部</p><h2 id="4-原型式继承">4.原型式继承</h2><p>方法一：<br>借用构造函数在一个函数A内部创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。</p><p>本质上，函数A是对传入的对象执行了一次浅复制。</p><pre><code class="language-javascript">function createObject(obj) &#123;  function Fun() &#123;&#125;  Fun.prototype = obj  return new Fun()&#125; let person = &#123;  name: '喜羊羊',  age: 18,  hoby: ['唱', '跳'],  showName() &#123;    console.log('my name is:', this.name)  &#125;&#125; let child1 = createObject(person)//相当于让person是child1的原型child1.name = 'xxxy'child1.hoby.push('rap')let child2 = createObject(person) console.log(child1)//Fun &#123;name: 'xxxy'&#125;console.log(child2)//Fun &#123;&#125;console.log(person.hoby) // ['唱', '跳', 'rap']</code></pre><p>方法二：Object.create()</p><blockquote><p>Object.create() 是把现有对象的属性，挂到新建对象的原型上，新建对象为空对象<br>ECMAScript 5通过增加Object.create()方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。在只有一个参数时，Object.create()与这里的函数A方法效果相同。</p></blockquote><pre><code class="language-javascript">let person = &#123;  name: 'mjy',  age: 19,  hoby: ['唱', '跳'],  showName() &#123;    console.log('my name is: ', this.name)  &#125;&#125; let child1 = Object.create(person)child1.name = 'xxt'child1.hoby.push('rap')let child2 = Object.create(person) console.log(child1)console.log(child2)console.log(person.hoby) // ['唱', '跳', 'rap']</code></pre><h2 id="5-寄生式继承">5.寄生式继承</h2><blockquote><p>寄生式继承的思路与(寄生) <code>原型式继承</code> 和 <code>工厂模式</code> 似, 即创建一个仅用于封装继承过程的函数,该函数在内部以某种方式来增强对象,最后再像真的是它做了所有工作一样返回对象。</p></blockquote><pre><code class="language-javascript">function objectCopy(obj) &#123;  function Fun() &#123; &#125;;  Fun.prototype = obj;  return new Fun();&#125; function createAnother(obj) &#123;  let clone = objectCopy(obj);//obj是clone 这个实例的原型  clone.showName = function () &#123;    console.log('my name is：', this.name);  &#125;;  return clone;&#125; let person = &#123;     name: &quot;myy&quot;,     age: 18,     hoby: ['唱', '跳']&#125; let child1 = createAnother(person);child1.hoby.push(&quot;rap&quot;);console.log(child1.hoby); // ['唱', '跳', 'rap']child1.showName(); // my name is： myy let child2 = createAnother(person);console.log(child2.hoby); // ['唱', '跳', 'rap']</code></pre><p>优点：写法简单，不需要单独创建构造函数。</p><p>缺点：通过寄生式继承给对象添加函数会导致函数难以重用。使用寄生式继承来为对象添加函数, 会由于不能做到函数复用而降低效率;这一点与构造函数模式类似.</p><h2 id="6-寄生组合式继承">6.寄生组合式继承</h2><blockquote><p>前面讲过，组合继承是常用的经典继承模式，不过，组合继承最大的问题就是无论什么情况下，都会调用两次父类构造函数；一次是在创建子类型的时候，一次是在子类型的构造函数内部。寄生组合继承就是为了降低父类构造函数的开销而实现的。</p></blockquote><p>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p><pre><code class="language-javascript">function objectCopy(obj) &#123;  function Fun() &#123; &#125;;  Fun.prototype = obj;  return new Fun();&#125; function inheritPrototype(child, parent) &#123;  let prototype = objectCopy(parent.prototype);//parent.prototype 是 prototype这个实例的原型 本例中调用该函数时panrent.prototype上只有一个showName方法  prototype.constructor = child;  //让prototype的constructor方法为child  child.prototype = prototype;&#125; function Parent(name) &#123;  this.name = name;  this.hoby = ['唱', '跳']&#125; Parent.prototype.showName = function () &#123;  console.log('my name is：', this.name);&#125; function Child(name, age) &#123;  Parent.call(this, name);//将Parent属性复制进来  this.age = age;&#125; inheritPrototype(Child, Parent);Child.prototype.showAge = function () &#123;  console.log('my age is：', this.age);&#125; let child1 = new Child(&quot;xyy&quot;, 18);child1.showAge(); // 18child1.showName(); //xyychild1.hoby.push(&quot;rap&quot;);console.log(child1.hoby);  let child2 = new Child(&quot;myy&quot;, 18);child2.showAge(); // 18child2.showName(); // myyconsole.log(child2.hoby); </code></pre><blockquote><p>两行输出的是什么？</p></blockquote><p><img src="image.png" alt="Alt text"><br>优点是：高效率只调用一次父构造函数，并且因此避免了在子原型上面创建不必要，多余的属性。与此同时，原型链还能保持不变；</p><p>缺点是：代码复杂</p><h2 id="ES6-提供了继承的关键字-extends">ES6 提供了继承的关键字 extends</h2><pre><code class="language-javascript">class Person &#123;  constructor(name) &#123;    this.name = name  &#125;  // 原型方法  // 即 Person.prototype.getName = function() &#123; &#125;  // 下面可以简写为 getName() &#123;...&#125;  getName = function () &#123;    console.log('Person:', this.name)  &#125;&#125; class Gamer extends Person &#123;  constructor(name, age) &#123;    // 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。    super(name)//通过super(name)调用了父类的构造函数 并且传入了name参数    this.age = age  &#125;&#125; const asuna = new Gamer('Asuna', 20)asuna.getName() // 成功访问到父类的方法</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/11/%E7%9B%B4%E6%92%AD/"/>
      <url>/2023/09/11/%E7%9B%B4%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="前端组组别介绍">前端组组别介绍</h2><h3 id="前端是什么？">前端是什么？</h3><p>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，合适的动效设计，给用户带来极高的用户体验。(摘自百度百科)</p><p>用我自己的话说，前端组所做的工作大多是我们能看见的部分，比如网页的布局，动画，还有网页上的信息，都需要我们前端通过代码来呈现。在一个项目落地的过程中，前端在团队中扮演的是将设计组绘制好的设计图通过代码实现成我们能看得到的网页，并且完成产品组要求的交互功能及效果的一个角色。<br>在我眼里，前端是一个极其可视化的工作。</p><h3 id="前端能做什么？">前端能做什么？</h3><p>我们主要是做<strong>小程序</strong>以及<strong>网页</strong>。<br>其实也可以通过一些框架将前端代码转化，实现<strong>移动端APP</strong>。</p><p>所以前端其实还是蛮全能的hhhhh，你们用的我们都可以做。</p><h3 id="前端需要学什么？">前端需要学什么？</h3><p>前端从代码构成来说分为HTML、CSS、JS（JavaScript）三个部分，分别负责一个方面的功能：</p><p>HTML用来描述网页的文档结构，用来当作网页内容的容器。代码中包含 &lt;&gt; 或者 &lt;&gt;…&lt;/&gt; 的都是HTML代码；</p><p>CSS用来描述网页的外观特征，比如排版、外形、颜色等；</p><p>JS主要两个功能：动态的控制网页 &amp; 实现通信交互；（JS可以直接操作html和css，功能非常强大，所以在前端学习中js需要投入更多的精力）</p><p><img src="https://s2.loli.net/2023/09/11/lZNSpAfj5hKiFYC.jpg" alt="IMG_9954_20230904-230314_.JPG"><br>（前端学习路线图）</p><p>直播中我们主要会学习一些基础的html和css</p><h2 id="入门知识教学">入门知识教学</h2><h3 id="开发工具">开发工具</h3><p>chrome浏览器  <a href="https://www.google.cn/chrome/index.html">https://www.google.cn/chrome/index.html</a></p><p>visual studio code （简称vscode）<br><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>配置中文界面，下载live server插件查看实时代码效果</p><p>教程链接：<br>菜鸟教程 <a href="https://www.runoob.com/">https://www.runoob.com/</a></p><p>w3school <a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><h3 id="教学–写一个简单的注册信息静态页面">教学–写一个简单的注册信息静态页面</h3><h4 id="什么是html">什么是html</h4><p>HTML 是用来描述网页的一种语言。HTML 是一种在 Web 上使用的通用标记语言。HTML 允许你格式化文本，添加图片，创建链接、输入表单、框架和表格等等，并可将之存为文本文件，浏览器即可读取和显示。</p><ul class="lvl-0"><li class="lvl-2"><p>HTML 指的是超文本标记语言: HyperText Markup Language</p></li><li class="lvl-2"><p>HTML 不是一种编程语言，而是一种标记语言</p></li><li class="lvl-2"><p>标记语言是一套标记标签 (markup tag)</p></li><li class="lvl-2"><p>HTML 使用标记标签来描述网页</p></li><li class="lvl-2"><p>HTML 文档包含了HTML 标签及文本内容</p></li><li class="lvl-2"><p>HTML文档也叫做 web</p></li></ul><p>代码：</p><pre><code class="language-html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;&lt;/title&gt;        &lt;style&gt;         form&#123;            background-color: bisque;        &#125;        #sex&#123;            color: red;        &#125;        .hobby&#123;            color: blue;        &#125;        &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;form&gt;&lt;p&gt;姓名:&lt;input type=&quot;text&quot; /&gt;&lt;p /&gt;&lt;p&gt;登录名:&lt;input type=&quot;text&quot; /&gt;(可包含a-z,0-9和下划线)&lt;p /&gt;&lt;p&gt;密码:&lt;input type=&quot;password&quot; /&gt;(至少包含6个字符)&lt;p /&gt;&lt;p&gt;确认密码:&lt;input type=&quot;password&quot; /&gt;&lt;p /&gt;&lt;p id=&quot;sex&quot;&gt;性别:&lt;input type=&quot;radio&quot;/&gt;男&lt;input type=&quot;radio&quot; /&gt;女&lt;p /&gt;&lt;p class=&quot;hobby&quot;&gt;爱好: &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;sport&quot; /&gt;运动&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;chat&quot; /&gt;聊天&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;play&quot; /&gt;玩游戏&lt;p /&gt;&lt;p&gt;职业:&lt;select name=&quot;career&quot;&gt;&lt;option value=&quot;engineer&quot;&gt;工程师&lt;/option&gt;&lt;option value=&quot;teacher&quot;&gt;教师&lt;/option&gt;&lt;option value=&quot;doctor&quot;&gt;医生&lt;/option&gt;&lt;/select&gt;&lt;p /&gt;&lt;b&gt;阅读淘宝网协议&lt;/b&gt;&lt;br /&gt;&lt;textarea name=&quot; protocol&quot; cols=&quot;50&quot; rows=&quot;5&quot; value=&quot;&quot;&gt;淘宝平台服务协议                                                                                             最新版本生效日期：2019年08月19日提示条款欢迎您与各淘宝平台经营者（详见定义条款）共同签署本《淘宝平台服务协议》（下称“本协议”）并使用淘宝平台服务！本协议为《淘宝服务协议》修订版本，自本协议发布之日起，淘宝平台各处所称“淘宝服务协议”均指本协议。各服务条款前所列索引关键词仅为帮助您理解该条款表达的主旨之用，不影响或限制本协议条款的含义或解释。为维护您自身权益，建议您仔细阅读各条款具体表述。【审慎阅读】您在申请注册流程中点击同意本协议之前，应当认真阅读本协议。请您务必审慎阅读、充分理解各条款内容，特别是免除或者限制责任的条款、法律适用和争议解决条款。免除或者限制责任的条款将以粗体下划线标识，您应重点阅读。如您对协议有任何疑问，可向淘宝平台客服咨询。【签约动作】当您按照注册页面提示填写信息、阅读并同意本协议且完成全部注册程序后，即表示您已充分阅读、理解并接受本协议的全部内容，并与淘宝达成一致，成为淘宝平台“用户”。阅读本协议的过程中，如果您不同意本协议或其中任何条款约定，您应立即停止注册程序。&lt;/textarea&gt;&lt;br /&gt;&lt;input type=&quot;checkbox&quot; name=&quot;read&quot; value=&quot;&quot; /&gt;已阅读条款&lt;br /&gt;&lt;input type=&quot;reset&quot; value=&quot;重填&quot; /&gt;&lt;input type=&quot;submit&quot; value=&quot;提交注册信息&quot; disabled=&quot;disabled&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="整活专题">整活专题</h3><p>这一部分里除了html和css还用到了一点简单的js，不要求完全理解，大概了解代码用途即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redux的原理、工作流程及其应用</title>
      <link href="/2023/05/21/%E5%88%86%E4%BA%AB/"/>
      <url>/2023/05/21/%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1>redux的原理、工作流程及其应用</h1><blockquote><p>Redux对于JavaScript应用而言是一个可预测状态的容器。换言之，它是一个应用数据流框架，而不是传统的像underscore.js或者AngularJs那样的库或者框架。</p></blockquote><h2 id="1、什么是redux？">1、什么是redux？</h2><p><strong>redux是专门用于集中式管理状态的javascript库</strong>，他并不是react的插件库。</p><p>比如你有多个组件A-E都想要用同一个组件D中的状态：<br>1）像以前我们可以通过父子组件通信的方式让父组件进行传递状态，或者是让兄弟组件之间通过<strong>订阅发布</strong>进行通信<br>2）当我们使用了<strong>redux</strong>就可以直接通过让redux进行统一的状态管理，谁想要用状态就自己去拿，<strong>省去</strong>了第一种方法的<strong>层层传递</strong></p><p><img src="https://s2.loli.net/2023/05/20/7tSbm6zQK51C4JB.jpg" alt="fa5eae9ac95848919417daff9ae5c20d.jpeg"></p><p><strong>2、redux的工作流程</strong></p><blockquote><p>在我们了解redux的工作流程之前我们应该要知道redux有三个核心概念，分别为actions、store、reducers（带s的表明可能存在多个）</p></blockquote><p><strong>1）actions</strong><br>actions英文直译过来就是行动、动作的意思，那么我们就可以猜到他表示的是“怎么做”，简单来说actions就是一个对象，actions里面有两个属性分别为<strong>type</strong>和<strong>data</strong>：<br>type：标识属性，值为字符串且唯一，必要属性（你想要做什么事情<br>data：数据属性，值为任意类型，可选属性（你要做事情的数据</p><p>那我们浅浅举个栗子：比如计算器你可以进行加1减2等操作，那么加减乘除这个操作就是你的type，数字就是你的数据</p><p><strong>2）store</strong><br>store有且只能有一个，他相当于一个最高指挥家，他负责把action动作交给对应的reducer进行执行，也就是说将state、action和reducer联系在一起的对象。</p><p><strong>3）reducer</strong><br>reducer用于将store发过来的action完成并将结果返回给store，他接收两个参数preState（旧状态）和action（动作）并返回一个newState（新状态）。</p><p>比如像计算器我们需要在原来的数据上进行加1的操作，那么旧状态旧对应原来的数据，action对应加1的操作，返回的新状态就是计算器加完之后重新返回的结果。</p><p><strong>那么他的工作流程是什么样的呢？</strong><br><img src="https://s2.loli.net/2023/05/20/T5i6vj7ar1nKPxC.png" alt="75e02503f8374e88a1678083336f0d71.png"><br>1）首先我们要确定我们要做什么<br>2）让Action Creators创建action（也就是你要做的事情）<br>3）通过dispatch将action分发出去<br>4）store对要使用的reducer进行绑定，然后将action分发到对应的reducer上<br>5）在reducer上进行相应的action操作并返回结果给store<br>6）组件就可以通过store的API像store进行获取操作返回的结果</p><h2 id="2-项目中使用Redux">2.项目中使用Redux</h2><p>这里就新建项目然后使用redux完成一个小案例</p><p>比如我们的微信和支付宝都绑定了同一张银行卡,当我们去使用支付宝或者微信支付的时候,对应的这个银行卡上的余额就会减少。也就是说支付宝和微信共享了银行卡的账户余额。</p><p>项目中要用到Redux，所以要先进行下载</p><pre><code>npm i -D redux</code></pre><p>我们来捋一捋实现这个功能的思路，在微信和支付宝端余额显示相同。思路是建立一个文件夹叫store，index.js中是我们用来创建store的,然后建立一个action来放咱们的一些action,我们通过action来修改store,连接action和store的是我们的reducer ,reducer是一个纯函数</p><p>store/index.js :</p><pre><code class="language-javascript">import &#123; legacy_createStore as createStore &#125; from 'redux'import reducer from './reducer'const store = createStore(reducer)export default store</code></pre><p>新建canstance.js文件，在里面定义对应的方法：</p><pre><code class="language-javascript">export const INCREMENT = 'INCREMENT'export const DECREMENT = 'DECREMENT'export const ADD_NUMBER = 'ADD_NUMBER'export const SUB_NUMBER = 'SUB_NUMBER'</code></pre><p>然后创建action的内容，新建action文件：</p><pre><code class="language-javascript">import &#123; INCREMENT, DECREMENT, ADD_NUMBER, SUB_NUMBER &#125; from './canstance'export const incAction = num =&gt;(&#123; type: INCREMENT, num &#125;)export const decAction = num =&gt;(&#123; type: DECREMENT, num &#125;)export const addAction = num =&gt;(&#123; type: ADD_NUMBER, num &#125;)export const subAction = num =&gt;(&#123; type: SUB_NUMBER, num &#125;)</code></pre><p>最后新建reducer文件，建立store和action之间的联系：</p><pre><code class="language-javascript">import &#123; INCREMENT, DECREMENT, ADD_NUMBER, SUB_NUMBER &#125; from './canstance'const initState = &#123;    money: 0&#125;const reducer = (state=initState, action) =&gt; &#123;    switch(action.type) &#123;        case INCREMENT:            return &#123;...state, money: state.money + 1&#125;        case DECREMENT:            return &#123;...state, money: state.money - 1&#125;        case ADD_NUMBER:            return &#123;...state, money: state.money + action.num&#125;        case SUB_NUMBER:            return &#123;...state, money: state.money - action.num&#125;        default:         return state    &#125;&#125;export default reducer</code></pre><p>最后来到开始创建的alipay.js和wxpay.js，这两个文件里面的内容大致相同，下面就举例说明一个<br>1.引入store.js<br>2.定义state状态，利用store .getState().money进行取值<br>3.在componentDidMount中进行值的更新</p><pre><code class="language-javascript">import React, &#123; PureComponent &#125; from 'react'import store from '../store'import &#123; addAction, subAction &#125; from '../store/action'export class Alipay extends PureComponent &#123;  state = &#123;    money: store.getState().money  &#125;  componentDidMount() &#123;    store.subscribe(() =&gt; &#123;      this.setState(&#123;money: store.getState().money&#125;)    &#125;)  &#125;  render() &#123;    return (      &lt;div&gt;        &lt;h1&gt;支付宝&lt;/h1&gt;        &lt;h2&gt;余额：&#123;this.state.money&#125;&lt;/h2&gt;        &lt;button onClick=&#123;e =&gt; this.decrement(1)&#125;&gt;付钱&lt;/button&gt;        &lt;button onClick=&#123;e =&gt; this.makemoney(100)&#125;&gt;收钱&lt;/button&gt;      &lt;/div&gt;    )  &#125;  decrement(num) &#123;    store.dispatch(subAction(num))  &#125;  makemoney(num) &#123;    store.dispatch(addAction(num))  &#125;&#125;export default Alipay</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>promise</title>
      <link href="/2023/04/29/promise/"/>
      <url>/2023/04/29/promise/</url>
      
        <content type="html"><![CDATA[<h2 id="目录">目录</h2><p>-<a href="#%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B">异步编程</a><br>-<a href="#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0">回调函数</a><br>-<a href="#%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1">回调地狱</a><br>-<a href="#promise">promise</a></p><h2 id="异步编程">异步编程</h2><p>js语言是<strong>单线程机制</strong>。所谓单线程就是按次序执行，执行完一个任务再执行下一个。但是不影响存在同步和异步的两种操作，这两种操作做事情其实都是在一条流水线上(单线程)，只是这两种操作在单线程上的执行顺序不一样罢了。当js触发到异步任务时，会将异步任务交给浏览器处理，当执行<strong>有结果</strong>时，会把异步任务的回调函数插入待处理队列的队尾。</p><p>通俗的去解释一下异步：异步就是从主线程发射一个子线程来完成任务，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的.</p><p><img src="https://s2.loli.net/2023/05/07/rsXiHucjDbzk5L1.png" alt="74d580d4b9924507b5148e6a8a6ae6ea.png"></p><h2 id="回调函数">回调函数</h2><p>回调函数的定义非常简单：一个函数被当做一个实参传入到另一个函数(外部函数)，并且这个函数在外部函数内被调用，用来完成某些任务的函数。就称为<strong>回调函数</strong><br>回调函数的两种写法(实现效果相同)：</p><pre><code class="language-javascript">const text = () =&gt; &#123;       document.write('hello james')&#125;setTimeout(text,1000)</code></pre><pre><code class="language-javascript">setTimeout(()=&gt;&#123;       document.write(&quot;hello james&quot;)&#125;,1000)</code></pre><p>这段代码中的 setTimeout 就是一个消耗时间较长的过程，它的第一个参数是个回调函数，第二个参数是毫秒数，这个函数执行之后会产生一个子线程，子线程会等待 1 秒，然后执行回调函数 “text”，在文本中输出hello james</p><p>setTimeout会在子线程中等待1秒，但是主线程的运行不会受到影响！例如以下代码：</p><pre><code class="language-javascript">setTimeout(()=&gt;&#123;    document.write(&quot;hello davis&quot;)&#125;,1000)console.log('123456');</code></pre><p>在这里会先打印出来123456(主线程),然后一秒后在文本中输出hello davis(子线程)</p><h2 id="回调地狱">回调地狱</h2><p>回调地狱这个词听起来就非常的高大上，想要接触Promise之前，必须要懂得什么是回调地狱，以及为什么会产生回调地狱？<br>先来看看概念：<strong>当一个回调函数嵌套一个回调函数的时候就会出现一个嵌套结构当嵌套的多了就会出现回调地狱的情况。</strong><br>举个例子：比如我们发送三个 ajax 请求：</p><p>第一个正常发送<br>第二个请求需要第一个请求的结果中的某一个值作为参数<br>第三个请求需要第二个请求的结果中的某一个值作为参数</p><p>你会看到以下代码：</p><pre><code class="language-javascript">$.ajax(&#123;  url: '我是第一个请求',  type: 'get',  success (res) &#123;    // 现在发送第二个请求    $.ajax(&#123;      url: '我是第二个请求'，      type:'post',      data: &#123; a: res.a, b: res.b &#125;,      success (res1) &#123;        // 进行第三个请求        $.ajax(&#123;          url: '我是第三个请求',          type:'post',          data: &#123; a: res1.a, b: res1.b &#125;,                  success (res2) &#123;             console.log(res2)           &#125;        &#125;)      &#125;    &#125;)  &#125;&#125;)</code></pre><p>当我们把代码写成这样的时候，就陷入了可维护性差的状态了，代码体验非常的不良好，为了解决这个问题，于是，就引入了Promise,用Promise去解决回调地狱问题</p><h2 id="promise">promise</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大,它是一个 ECMAScript 6 提供的类，目的是更加优雅地书写复杂的异步任务。</p><p>Promise对象有以下两个特点:</p><p>1.<strong>对象的状态不受外界影响</strong>。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>2.<strong>一旦状态改变，就不会再变</strong>，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><h3 id="Promise语法格式">Promise语法格式</h3><pre><code class="language-javascript"> new Promise(function (resolve, reject) &#123;  // resolve 表示成功的回调  // reject 表示失败的回调&#125;).then(function (res) &#123;  // 成功的函数&#125;).catch(function (err) &#123;  // 失败的函数&#125;)</code></pre><p>出现了new关键字，就明白了Promise对象其实就是一个构造函数，是用来生成Promise实例的。能看出来构造函数接收了一个函数作为参数，该函数就是Promise构造函数的回调函数，该函数中有两个参数resolve和reject，这两个参数也分别是两个函数！</p><p>简单的去理解的话resolve函数的目的是将Promise对象状态变成成功状态，在异步操作成功时调用，将异步操作的结果，作为参数传递出去。reject函数的目的是将Promise对象的状态变成失败状态，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><p>代码示例</p><pre><code class="language-javascript">      const promise = new Promise((resolve,reject)=&gt;&#123;          //异步代码          setTimeout(()=&gt;&#123;              // resolve(['111','222','333'])              reject('error')          &#125;,2000)      &#125;)      promise.then((res)=&gt;&#123;          //兑现承诺，这个函数被执行          console.log('success',res);      &#125;).catch((err)=&gt;&#123;          //拒绝承诺，这个函数就会被执行          console.log('fail',err);      &#125;)</code></pre><p><strong>代码分析</strong></p><p>上边说到Promise是一个构造函数，new之后等于说调用了构造函数，构造函数中传的参数是一个函数，这个函数内的两个参数分别又是两个函数(reslove和reject)，虽然感觉很绕，但是理清思路会很清晰的！我们得到对象promise,promise对象中自带有两个方法then和catch，这两个方法中会分别再传入一个回调函数，这个回调函数的目的在于返回你所需要成功或失败的信息！那么怎么去调用这两个回调函数呢？看下方图可以快速理解:</p><p><img src="https://s2.loli.net/2023/05/07/BQ5vlpLNKdT4Iob.png" alt="a4a0aebebaf54ba7a2b20305c4e0354a.png"></p><p>这两个函数分别作为参数(reslove和reject)传到上方的函数中去了.随后在构造函数的回调函数中写入异步代码(例如：ajax和定时器)，这里使用了定时器作为例子，如果你想表达的是成功回调，你可以在内部调用函数reslove('一般情况下是后端返回的成功数据)。如果你想表达的是失败回调，你可以调用reject(‘一般情况下是后端返回的失败信息’).</p><h3 id="Promise链式">Promise链式</h3><p>then方法返回的是一个新的Promise实例（注意:不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法实际案例：我想要实现在一个数组中查看一个帖子，但是我最终的目的是得到这个帖子下面的所有评论，这该怎么实现呢？</p><p>实现思路：</p><p>先从一个接口中获取这个帖子的信息，然后通过该帖子的帖子id从而获取到该帖子下的所有评论代码如下：</p><pre><code class="language-javascript">pajax(&#123;    url:&quot;http://localhost:3000/news&quot;,    data : &#123;        author : &quot;james&quot;    &#125;&#125;).then(res=&gt;&#123;    return pajax(&#123;        url : &quot;http://localhost:3000/comments&quot;,        data : &#123;            newsId : res[0].id        &#125;    &#125;)&#125;).then(res=&gt;&#123;    console.log(res);&#125;).catch(err=&gt;&#123;    console.log(err);&#125;)</code></pre><p><strong>代码分析：</strong></p><p>这里使用了一个Promise已经封装过的ajax，我们从第一个接口中得到了帖子id，然后在then中的函数发送第二个请求(携带了第一个请求返回过来的参数)，我们最后想要拿到第二个接口的结果，于是又有了一个then方法，但是在第一个then方法中要把一个新的Promise实例return出去，这样的话，第二个then才起作用！(这是因为then方法是Promise 实例所具有的方法，也就是说，then方法是定义在原型对象Promise.prototype上的)====&gt;我们可以打印一下：console.log(Promise.prototype)</p><h3 id="Promise-all">Promise.all()</h3><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p>语法格式：</p><p>const p = Promise.all([p1, p2, p3]);</p><p>Promise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会调用Promise.reslove() [该方法可自行了解]自动将参数转为 Promise 实例，再进一步处理。说那么多白话没用，我们可以根据一个案例，就可以明白Promise.all()的用途了。实际案例：如果你想实现一个效果：在一个页面中，等到页面中所有的请求返回数据后，再渲染页面，该怎么实现呢？(在实际开发中我们会看到loading加载页面，等数据返回完后，loading加载页面会消失，整个页面就展现出来了，增强用户的体验。)<br>实现思路：通过Promise.all()方法，等多个接口全部接收到数据后，再统一进行处理，然后渲染页面代码如下：</p><pre><code class="language-javascript">console.log(&quot;显示加载中&quot;)const q1 = pajax(&#123;    url:&quot;http://localhost:3000/looplist&quot;&#125;)const q2 = pajax(&#123;    url:&quot;http://localhost:3000/datalist&quot;&#125;)Promise.all([q1,q2]).then(res=&gt;&#123;    console.log(res)    console.log(&quot;隐藏加载中...&quot;)&#125;).catch(err=&gt;&#123;    console.log(err)&#125;)</code></pre><p><strong>代码分析：</strong></p><p>在上方代码中，全局打印显示加载中是代替loading的页面，表示该页面现在正是loading页面中，等到q1和q2所请求接口都得到返回的信息后，在then方法中接收收据，并且可以进行渲染页面，同时隐藏了loading加载页面！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>词法作用域vs动态作用域</title>
      <link href="/2022/12/01/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9Fvs%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2022/12/01/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9Fvs%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1>词法作用域和动态作用域有什么不同？</h1><p>作用域分为 <strong>静态作用域</strong> 和 <strong>动态作用域</strong>，动态作用域在函数调用时才决定，而静态作用域在编译时期（词法解析阶段）就确定好了，所以也叫词法作用域。</p><pre><code>function fun() &#123;    console.log(a)&#125;function bar() &#123;    var a=3    fun()&#125;var a=1bar()  // 1</code></pre><p>在解释这个例子之前，还得讲解另一个知识点。</p><h2 id="LHS和RHS">LHS和RHS</h2><p>LSH(left-hand side)找到变量所在的容器本身，并且将对该变量进行赋值。</p><p>RHS(right-hand side)查找某个变量的值</p><p>LSH和RSH查找过程通过作用域链进行寻找。作用域链在函数定义的时候创建好。</p><p>现在说回这个例子，在fun函数要执行console.log(a)，就是要找到变量a的值，但是fun函数没有变量a，所以要通过RSH查询（当前作用域=&gt;上一级作用域=&gt; … =&gt; 全局作用域）找到变量a，在全局作用域里找到变量a，于是就输出1。</p><p>下面我们来看看动态作用域的例子（bash采用的是动态作用域)</p><pre><code>#!/bin/bashnum=1function fun1()&#123;    echo $num&#125;function fun2()&#123;    local num=2    fun1   // 2&#125;fun2</code></pre><p>动态作用域会从检查函数调用链，查找目标变量出来，所以就可以对上面的例子继续解释，在fun1函数找不到num变量，就会从调用栈中找到上一级调用fun1的函数fun2，并且在函数fun2找到变量num，所以就会输出2。</p><pre><code>function foo() &#123;    console.log(a);&#125;function bar() &#123;    var a = 3;    foo();&#125;var a = 2;bar(); // 2;</code></pre><p>这个js程序使用的是词法作用域。如果它使用动态作用域，将会输出什么？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>What is Closure?</title>
      <link href="/2022/12/01/closure/"/>
      <url>/2022/12/01/closure/</url>
      
        <content type="html"><![CDATA[<h1>闭包是什么？</h1><p>在了解闭包之前，我们要先理解JavaScript的作用域——全局作用域和局部作用域（先不考虑块级作用域）。</p><ul class="lvl-0"><li class="lvl-2"><p>在全局作用域下声明的变量就是全局变量.</p></li><li class="lvl-2"><p>在局部作用域下声明的变量就是局部变量。</p></li></ul><p>因为 <strong>作用域</strong> 链的存在，函数内部可以直接读取全局变量。而函数内部无法读取函数内部的局部变量。</p><p><strong>作用域链是什么？</strong></p><blockquote><p>当在Javascript中使用一个变量的时候，首先Javascript引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域。</p></blockquote><p><strong>闭包的概念</strong></p><blockquote><p>闭包就是在一个函数内部创建另一个函数，让你可以在一个内层函数中访问到其外层函数的作用域。又或者说，闭包就是能够读取其他函数内部变量的函数。</p></blockquote><pre><code>function wrapValue(n) &#123;let local = n;return () =&gt; local; //内层匿名函数访问外层函数变量n&#125;let wrap1 = wrapValue(1);let wrap2 = wrapValue(2);console.log(wrap1());// → 1console.log(wrap2());// → 2</code></pre><p>这个例子来自于《JavaScript编程精解》，其中给wrap1赋值为一个包含 1 的一个函数此时我们使用求值结果运算符来访问这个函数，函数返回了1，所以我们看到了1</p><p>wrap2 同理</p><pre><code>function multiplier(factor) &#123;return number =&gt; number * factor;&#125;let twice = multiplier(2);console.log(twice(5));// → 10</code></pre><h1>闭包的作用是什么？</h1><p>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。</p><p>假设我们在做一个游戏，在写其中关于「还剩几条命」的代码。</p><p>如果不用闭包，你可以直接用一个全局变量：</p><pre><code>window.lives = 30 // 还有三十条命</code></pre><p>这样看起来很不妥。万一不小心把这个值改成 -1 了怎么办。所以我们不能让别人「直接访问」这个变量。怎么办呢？</p><p>用局部变量。</p><p>但是用局部变量别人又访问不到，怎么办呢？</p><p>暴露一个访问器（函数），让别人可以「间接访问」。</p><p>代码如下：</p><pre><code>!function()&#123;var lives = 50window.奖励一条命 = function()&#123;    lives += 1&#125;window.死一条命 = function()&#123;    lives -= 1&#125;&#125;()</code></pre><p>这就是闭包的第一个优点：<strong>保证函数不受外界干扰，实现封装，避免命名冲突</strong></p><pre><code>function f1()&#123;    var n=2;    function f2()&#123;        var q=0;        console.log('n=',++n);        console.log('q=',++q);    &#125;    return  f2;&#125;var f=f1();f() f() //这两个f(n)的结果分别是什么？？</code></pre><p>在上面这个例子中， f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，所以f2 始终在内存中，且 f2 的存在依赖于 f1中的n，这就导致变量n无法被销毁，而变量q是每次被调用时新创建的，所以每次f2执行完后它就把属于自己的变量连同自己一起销毁，于是乎最后就剩下孤零零的n。</p><p>这就是闭包的第二个优点： <strong>可以在内存中保存函数变量，不会被垃圾回收机制回收，充当缓存</strong></p><p>但闭包也有缺点： <strong>内存消耗很大，容易造成内存泄漏, 要谨慎使用</strong></p><blockquote><p>内存泄漏：内存泄漏（Memory Leak）是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p></blockquote><p>闭包的作用就是可以在一个函数的内部访问到函数外部的变量。这是因为内部函数对外部函数属于同一作用域内，通过闭包内的函数访问到变量是因为内部函数保持着对变量的 <strong>引用</strong>，当注册一个点击事件的时候，就是一个闭包，当点击事件完成的时候，还会对改变量保持着引用。</p><p>让我们再看看上面的例子,我们已经无法再通过js代码来引用到变量n，但垃圾回收器却认为这个对象还在被引用，因此在回收的时候不会释放它。导致了分配的这块内存永远也无法被释放出来。如果这样的情况越来越多，会导致内存不够用而系统崩溃。</p><blockquote><p>其实内存泄漏并不是闭包造成的，而是通过闭包内的函数对变量的引用，闭包不是真正产生内存泄漏的原因！大量博客记录的实际遇到的闭包产生内存泄漏问题的根本原因就是没有及时的断开对变量的引用，而不是注册监听事件的闭包产生的内存泄漏。如果我们对该引用可以进行控制，就可以解决内存泄漏的问题，而不应该把这个锅甩给无辜的闭包。</p></blockquote><p>解决方法：可以在后面加一句</p><pre><code>f=null</code></pre><p>这样就销毁了其返回函数，也就解除了对不能释放的活动对象n的引用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2022/11/18/my-first-blog/"/>
      <url>/2022/11/18/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>我的第一篇博客！！</p>]]></content>
      
      
      <categories>
          
          <category> amiii </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/18/hello-world/"/>
      <url>/2022/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
